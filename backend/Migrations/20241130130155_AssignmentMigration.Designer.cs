// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _3w1m.Data;

#nullable disable

namespace _3w1m.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241130130155_AssignmentMigration")]
    partial class AssignmentMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000005",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000007",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Value = "Answer 1"
                        },
                        new
                        {
                            AnswerId = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Value = "Answer 2"
                        },
                        new
                        {
                            AnswerId = 3,
                            IsCorrect = true,
                            QuestionId = 2,
                            Value = "Answer 3"
                        },
                        new
                        {
                            AnswerId = 4,
                            IsCorrect = false,
                            QuestionId = 2,
                            Value = "Answer 4"
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ArticleId");

                    b.HasIndex("CourseId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            Content = "Content 1",
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(681),
                            Order = 1,
                            Summary = "Summary 1",
                            Title = "Article 1",
                            UpdatedAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(703)
                        },
                        new
                        {
                            ArticleId = 2,
                            Content = "Content 2",
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(710),
                            Order = 2,
                            Summary = "Summary 2",
                            Title = "Article 2",
                            UpdatedAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(711)
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.ArticleProgress", b =>
                {
                    b.Property<int>("ArticleProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArticleProgressId"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ArticleProgressId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("StudentId");

                    b.ToTable("ArticleProgresses");

                    b.HasData(
                        new
                        {
                            ArticleProgressId = 1,
                            ArticleId = 1,
                            ReadAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(1065),
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            Content = "Content 1",
                            CourseId = 3,
                            CreatedAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(879),
                            DueDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Assignment 1",
                            UpdatedAt = new DateTime(2024, 11, 30, 20, 1, 54, 681, DateTimeKind.Local).AddTicks(880)
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Code = "C001",
                            Description = "Description 1",
                            Name = "Course 1",
                            StartDate = new DateOnly(2022, 1, 1),
                            TeacherId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            Code = "C002",
                            Description = "Description 2",
                            Name = "Course 2",
                            StartDate = new DateOnly(2022, 1, 1),
                            TeacherId = 1
                        },
                        new
                        {
                            CourseId = 3,
                            Code = "C003",
                            Description = "Description 3",
                            Name = "Course test assignment",
                            StartDate = new DateOnly(2024, 1, 1),
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Enrollment", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EnrolledAt")
                        .HasColumnType("date");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            StudentId = 1,
                            EnrolledAt = new DateOnly(2022, 1, 1),
                            EnrollmentId = 0
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 2,
                            EnrolledAt = new DateOnly(2022, 2, 1),
                            EnrollmentId = 0
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuestionId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            AssignmentId = 1,
                            Name = "Question 1",
                            Type = "Multiple Choice"
                        },
                        new
                        {
                            QuestionId = 2,
                            AssignmentId = 1,
                            Name = "Question 2",
                            Type = "Multiple Choice"
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            DateOfBirth = new DateOnly(2000, 1, 1),
                            Fullname = "Student 1",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            StudentId = 2,
                            DateOfBirth = new DateOnly(2000, 1, 1),
                            Fullname = "Student 2",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            StudentId = 3,
                            DateOfBirth = new DateOnly(2000, 1, 1),
                            Fullname = "Student 3",
                            UserId = "00000000-0000-0000-0000-000000000007"
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            ContactEmail = "example@gmail.com",
                            ContactPhone = "0987654321",
                            Fullname = "Teacher 1",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            TeacherId = 2,
                            ContactEmail = "teacher",
                            ContactPhone = "0987654321",
                            Fullname = "teacher",
                            UserId = "00000000-0000-0000-0000-000000000006"
                        });
                });

            modelBuilder.Entity("_3w1m.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7ba2199-c651-41bc-8f89-686838f2bb95",
                            Email = "test1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/GVI6oHYb5STDvurwVD38TVNkX/9YYG3Bfr9G7J321GYmTy3OCrXmsNUe268NKng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8ec1916-e35b-4c9d-964f-cc84988e392e",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22f3aff4-5053-4c71-b825-ea91feec085e",
                            Email = "test2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEDOiXG3x3k0BF/y3B9HyhGEyQ0iKjffFaCY3QvETsPjEZ4sb9DfDVfOwLvhJkpzJ7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb6beaac-1ad4-4773-80e7-d4553a1af117",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d825393f-d50f-4252-a678-e47813066be5",
                            Email = "test3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEFiLhxnukwZZScuLC7t37bGNBerF5DijgW4+ypaAoN/XSz/Rg8w+7NNbCKdcjpYZGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7911bccd-fe4f-4b92-ad2f-861bcc187d30",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c64975af-16d8-498f-863b-4d434baa4091",
                            Email = "test4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEImQyHnBU37FWLsWDRrsCTaJ1L3Nd6ebxhoApn9XrIiqTdObxgpDdygwDRibgjxxBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae547c7f-1f15-478c-a74a-760cb32cf8dc",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9290a193-e299-4f0e-b648-a38823e20dfe",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjrI9Z8s2IWcTkE4UwvzfjkYHLpUALcOPsaLbHBsyWC5cm/6jT+LMur3iVGWHeEJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a088ae1-f6ae-4548-9073-6fd9f53679b8",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "779032ed-5b00-4d0e-ab16-59cc0396d111",
                            Email = "teacher@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@EXAMPLE.COM",
                            NormalizedUserName = "teacher",
                            PasswordHash = "AQAAAAIAAYagAAAAEJlkWrq9LdQOS+O4/+9EoaleqJlAv1/mUIkOO5buuuSzhuMMVaGUc56/ITW+ep+kTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df882d53-df7a-4ea2-9689-8392e7aaed3d",
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23bace04-4f85-43d1-9129-048ef766471a",
                            Email = "student@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1YsobPWIQ4EqkQHWQ3//Y2gJdn6nUEIWmue9+heNfsDeJepbiyycVfiAIHl5eG9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e94cfdd-d883-4fba-a58b-0b1fe3d10ee5",
                            TwoFactorEnabled = false,
                            UserName = "student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_3w1m.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Answer", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Article", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Course", "Course")
                        .WithMany("Articles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.ArticleProgress", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Article", "Article")
                        .WithMany("ArticleProgresses")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_3w1m.Models.Domain.Student", "Student")
                        .WithMany("ArticleProgresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Assignment", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Course", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Enrollment", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_3w1m.Models.Domain.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Question", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.Assignment", "Assignment")
                        .WithMany("Questions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.RefreshToken", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Student", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("_3w1m.Models.Domain.Student", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Teacher", b =>
                {
                    b.HasOne("_3w1m.Models.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("_3w1m.Models.Domain.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Article", b =>
                {
                    b.Navigation("ArticleProgresses");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Assignment", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Course", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.Student", b =>
                {
                    b.Navigation("ArticleProgresses");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("_3w1m.Models.Domain.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
